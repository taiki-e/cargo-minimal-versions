name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
      - dev
      - staging
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: stable
          - rust: beta
          - rust: nightly
          - rust: nightly
            os: macos-11
          - rust: nightly
            os: windows-2019
    runs-on: ${{ matrix.os || 'ubuntu-18.04' }}
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
      - uses: taiki-e/install-action@cargo-hack
      - uses: taiki-e/install-action@cargo-minimal-versions
      - run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"
        if: startsWith(matrix.os, 'windows')
      - run: cargo test --workspace --all-features
      - run: cargo minimal-versions build --workspace --all-features --ignore-private
        if: startsWith(matrix.rust, 'nightly')
      - run: cargo install -f --path . --debug
      - run: rustup toolchain add nightly --no-self-update
      - run: cargo minimal-versions check --workspace --all-features --ignore-private -v
      - run: cargo minimal-versions build --workspace --all-features --ignore-private -v
      - run: cargo minimal-versions test --workspace --all-features -v

  build:
    name: build (${{ matrix.target }})
    env:
      cargo: cargo
    strategy:
      fail-fast: false
      matrix:
        # When updating this list, the reminder to update the target list in release.yml.
        include:
          - target: aarch64-unknown-linux-gnu
          - target: aarch64-unknown-linux-musl
          - target: aarch64-apple-darwin
            os: macos-11
          - target: x86_64-unknown-linux-gnu
          - target: x86_64-unknown-linux-musl
          - target: x86_64-apple-darwin
            os: macos-11
          - target: x86_64-pc-windows-msvc
            os: windows-2019
    runs-on: ${{ matrix.os || 'ubuntu-18.04' }}
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@nightly
        with:
          target: ${{ matrix.target }}
      - uses: taiki-e/install-action@cross
        if: matrix.os == '' || startsWith(matrix.os, 'ubuntu')
      - run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"
        if: endsWith(matrix.target, 'windows-msvc')
      - run: echo "cargo=cross" >>"${GITHUB_ENV}"
        if: matrix.target != 'x86_64-unknown-linux-gnu' && (matrix.os == '' || startsWith(matrix.os, 'ubuntu'))
      - run: $cargo build --target ${{ matrix.target }}
      - run: $cargo build --target ${{ matrix.target }} --release

  msrv:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: taiki-e/install-action@cargo-hack
      # Make sure this crate can be built with MSRV and all later versions.
      # However, this takes time, so for PR, set the version interval.
      - run: cargo hack build --workspace --ignore-private --no-dev-deps --version-range ..
        if: github.event_name != 'pull_request'
      - run: cargo hack build --workspace --ignore-private --no-dev-deps --version-range .. --version-step 2
        if: github.event_name == 'pull_request'

  tidy:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy,rustfmt
      - uses: taiki-e/install-action@shellcheck
      - run: pip3 install yq
      - run: cargo fmt --all --check
        if: always()
      - run: cargo clippy --workspace --all-features --all-targets
        if: always()
      - run: shellcheck $(git ls-files '*.sh')
        if: always()
      - run: tools/check-workflow.sh
        if: always()

  # ALL THE PREVIOUS JOBS NEEDS TO BE ADDED TO THE `needs` SECTION OF THIS JOB!

  ci-success:
    name: ci
    if: github.event_name == 'push' && success()
    needs: [test, build, msrv, tidy] # tidy:needs
    runs-on: ubuntu-18.04
    steps:
      - name: Mark the job as a success
        run: exit 0
